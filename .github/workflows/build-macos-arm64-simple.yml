name: Build macOS ARM64 (Simple)

on:
  workflow_dispatch:
  workflow_call:

jobs:
  build-macos-arm64:
    runs-on: macos-14
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Configure Git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            ainative-studio/package-lock.json
            ainative-studio/build/package-lock.json
      
      - name: Install build dependencies
        working-directory: ainative-studio/build
        run: |
          for i in {1..5}; do
            npm ci && break
            if [ $i -eq 5 ]; then
              echo "npm ci in build/ failed too many times" >&2
              exit 1
            fi
            echo "npm ci in build/ failed $i, trying again..."
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Install dependencies
        working-directory: ainative-studio
        run: |
          for i in {1..5}; do
            npm ci && break
            if [ $i -eq 5 ]; then
              echo "npm ci failed too many times" >&2
              exit 1
            fi
            echo "npm ci failed $i, trying again..."
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Cache node build cache
        uses: actions/cache@v4
        with:
          path: |
            ainative-studio/node_modules/.cache
            ainative-studio/extensions/*/node_modules/.cache
          key: node-cache-${{ runner.os }}-arm64-${{ hashFiles('ainative-studio/package-lock.json') }}
          restore-keys: |
            node-cache-${{ runner.os }}-arm64-
            node-cache-${{ runner.os }}-
      
      - name: Cache gulp cache
        uses: actions/cache@v4
        with:
          path: ~/.gulp-cache
          key: ${{ runner.os }}-gulp-${{ hashFiles('ainative-studio/package-lock.json', 'ainative-studio/build/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-gulp-
      
      - name: Build React components
        working-directory: ainative-studio
        run: npm run buildreact
        env:
          NODE_OPTIONS: "--max-old-space-size=8192"
      
      - name: Build extensions in parallel
        working-directory: ainative-studio
        run: |
          # Build critical extensions first
          npm run gulp compile-extension:configuration-editing &
          npm run gulp compile-extension:css-language-features &
          npm run gulp compile-extension:typescript-language-features &
          npm run gulp compile-extension:git &
          wait
          
          # Build remaining extensions in parallel batches
          npm run gulp compile-extension:debug-auto-launch &
          npm run gulp compile-extension:debug-server-ready &
          npm run gulp compile-extension:emmet &
          npm run gulp compile-extension:extension-editing &
          wait
          
          npm run gulp compile-extension:git-base &
          npm run gulp compile-extension:github &
          npm run gulp compile-extension:github-authentication &
          npm run gulp compile-extension:grunt &
          wait
          
          npm run gulp compile-extension:gulp &
          npm run gulp compile-extension:html-language-features &
          npm run gulp compile-extension:ipynb &
          npm run gulp compile-extension:jake &
          wait
          
          npm run gulp compile-extension:json-language-features &
          npm run gulp compile-extension:markdown-language-features &
          npm run gulp compile-extension:markdown-math &
          npm run gulp compile-extension:media-preview &
          wait
          
          npm run gulp compile-extension:merge-conflict &
          npm run gulp compile-extension:terminal-suggest &
          npm run gulp compile-extension:microsoft-authentication &
          npm run gulp compile-extension:notebook-renderers &
          wait
          
          npm run gulp compile-extension:npm &
          npm run gulp compile-extension:php-language-features &
          npm run gulp compile-extension:references-view &
          npm run gulp compile-extension:search-result &
          wait
          
          npm run gulp compile-extension:simple-browser &
          npm run gulp compile-extension:tunnel-forwarding &
          npm run gulp compile-extension:vscode-api-tests &
          npm run gulp compile-extension:vscode-colorize-tests &
          wait
          
          # Finish remaining extensions
          npm run gulp compile-extension:vscode-colorize-perf-tests || true
          npm run gulp compile-extension:vscode-test-resolver || true
          npm run gulp compile-extension:vscode-selfhost-test-provider || true
          npm run gulp compile-extension:vscode-selfhost-import-aid || true
        env:
          NODE_OPTIONS: "--max-old-space-size=6144"
      
      - name: Build client (non-minified for faster builds)
        working-directory: ainative-studio
        run: |
          npm run gulp vscode-darwin-arm64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: "--max-old-space-size=8192"
          UV_THREADPOOL_SIZE: 64
      
      - name: Package
        working-directory: ainative-studio
        run: npm run gulp vscode-darwin-arm64-ci
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Verify build output
        run: |
          if [ ! -d "VSCode-darwin-arm64" ] && [ ! -d "../VSCode-darwin-arm64" ]; then
            echo "::error::Build output directory not found!"
            echo "Contents of ainative-studio directory:"
            ls -la
            echo "Contents of parent directory:"
            ls -la ../
            exit 1
          fi
        working-directory: ainative-studio
      
      - name: Create archive
        run: |
          if [ -d "VSCode-darwin-arm64" ]; then
            cd VSCode-darwin-arm64
            tar -czf ../ainative-studio-darwin-arm64.tar.gz .
          elif [ -d "../VSCode-darwin-arm64" ]; then
            cd ../VSCode-darwin-arm64
            tar -czf ../ainative-studio/ainative-studio-darwin-arm64.tar.gz .
          fi
        working-directory: ainative-studio
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ainative-studio-darwin-arm64
          path: ainative-studio/ainative-studio-darwin-arm64.tar.gz
          retention-days: 7

  package:
    needs: build-macos-arm64
    runs-on: macos-14
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ainative-studio-darwin-arm64
          path: ainative-studio/
      
      - name: Extract build
        working-directory: ainative-studio
        run: |
          echo "Extracting build artifact..."
          tar -xzf ainative-studio-darwin-arm64.tar.gz -C ../
          mv ../Void.app ../AINativeStudio.app 2>/dev/null || true
          echo "Build extracted successfully"
          ls -la ../
      
      - name: Create ZIP archive
        run: |
          echo "Creating ZIP archive..."
          if [ -d "../AINativeStudio.app" ]; then
            cd ..
            zip -r -y ainative-studio/AINativeStudio-darwin-arm64.zip AINativeStudio.app
          elif [ -d "../Void.app" ]; then
            cd ..
            # Rename app bundle
            mv Void.app AINativeStudio.app
            zip -r -y ainative-studio/AINativeStudio-darwin-arm64.zip AINativeStudio.app
          fi
          echo "ZIP archive created"
      
      - name: Create DMG
        run: |
          echo "Creating simple DMG..."
          
          # Create a temporary directory for DMG contents
          mkdir -p dmg-temp
          
          # Copy the app bundle
          if [ -d "../AINativeStudio.app" ]; then
            cp -R ../AINativeStudio.app dmg-temp/
          elif [ -d "../Void.app" ]; then
            # Rename app bundle if needed
            cp -R ../Void.app dmg-temp/AINativeStudio.app
          fi
          
          # Create Applications symlink
          ln -s /Applications dmg-temp/Applications
          
          # Create simple DMG
          hdiutil create -volname "AINative Studio" \
                        -srcfolder dmg-temp \
                        -ov -format UDZO \
                        AINativeStudio-darwin-arm64.dmg
          
          # Clean up
          rm -rf dmg-temp
          
          echo "DMG created successfully"
        working-directory: ainative-studio
      
      - name: Upload ZIP artifact
        uses: actions/upload-artifact@v4
        with:
          name: ainative-studio-darwin-arm64-zip
          path: ainative-studio/AINativeStudio-darwin-arm64.zip
          retention-days: 30
      
      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: ainative-studio-darwin-arm64-dmg
          path: ainative-studio/AINativeStudio-darwin-arm64.dmg
          retention-days: 30
      
