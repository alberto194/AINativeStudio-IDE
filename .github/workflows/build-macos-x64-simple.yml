name: Build macOS x64 (Simple)

on:
  workflow_dispatch:
  workflow_call:

jobs:
  build-macos-x64:
    runs-on: macos-13
    timeout-minutes: 90
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Configure Git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            ainative-studio/package-lock.json
            ainative-studio/build/package-lock.json
      
      - name: Install build dependencies
        working-directory: ainative-studio/build
        run: |
          for i in {1..5}; do
            npm ci && break
            if [ $i -eq 5 ]; then
              echo "npm ci in build/ failed too many times" >&2
              exit 1
            fi
            echo "npm ci in build/ failed $i, trying again..."
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Install dependencies
        working-directory: ainative-studio
        run: |
          for i in {1..5}; do
            npm ci && break
            if [ $i -eq 5 ]; then
              echo "npm ci failed too many times" >&2
              exit 1
            fi
            echo "npm ci failed $i, trying again..."
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Cache node build cache
        uses: actions/cache@v4
        with:
          path: |
            ainative-studio/node_modules/.cache
            ainative-studio/extensions/*/node_modules/.cache
          key: node-cache-${{ runner.os }}-x64-${{ hashFiles('ainative-studio/package-lock.json') }}
          restore-keys: |
            node-cache-${{ runner.os }}-x64-
            node-cache-${{ runner.os }}-
      
      - name: Cache gulp cache
        uses: actions/cache@v4
        with:
          path: ~/.gulp-cache
          key: ${{ runner.os }}-gulp-${{ hashFiles('ainative-studio/package-lock.json', 'ainative-studio/build/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-gulp-
      
      - name: Build React components
        working-directory: ainative-studio
        run: npm run buildreact
        env:
          NODE_OPTIONS: "--max-old-space-size=8192"
      
      - name: Build extensions in parallel
        working-directory: ainative-studio
        run: |
          # Build critical extensions first
          npm run gulp compile-extension:configuration-editing &
          npm run gulp compile-extension:css-language-features &
          npm run gulp compile-extension:typescript-language-features &
          npm run gulp compile-extension:git &
          wait
          
          # Build remaining extensions in parallel batches
          npm run gulp compile-extension:debug-auto-launch &
          npm run gulp compile-extension:debug-server-ready &
          npm run gulp compile-extension:emmet &
          npm run gulp compile-extension:extension-editing &
          wait
          
          npm run gulp compile-extension:git-base &
          npm run gulp compile-extension:github &
          npm run gulp compile-extension:github-authentication &
          npm run gulp compile-extension:grunt &
          wait
          
          npm run gulp compile-extension:gulp &
          npm run gulp compile-extension:html-language-features &
          npm run gulp compile-extension:ipynb &
          npm run gulp compile-extension:jake &
          wait
          
          npm run gulp compile-extension:json-language-features &
          npm run gulp compile-extension:markdown-language-features &
          npm run gulp compile-extension:markdown-math &
          npm run gulp compile-extension:media-preview &
          wait
          
          npm run gulp compile-extension:merge-conflict &
          npm run gulp compile-extension:terminal-suggest &
          npm run gulp compile-extension:microsoft-authentication &
          npm run gulp compile-extension:notebook-renderers &
          wait
          
          npm run gulp compile-extension:npm &
          npm run gulp compile-extension:php-language-features &
          npm run gulp compile-extension:references-view &
          npm run gulp compile-extension:search-result &
          wait
          
          npm run gulp compile-extension:simple-browser &
          npm run gulp compile-extension:tunnel-forwarding &
          npm run gulp compile-extension:vscode-api-tests &
          npm run gulp compile-extension:vscode-colorize-tests &
          wait
          
          # Finish remaining extensions
          npm run gulp compile-extension:vscode-colorize-perf-tests || true
          npm run gulp compile-extension:vscode-test-resolver || true
          npm run gulp compile-extension:vscode-selfhost-test-provider || true
          npm run gulp compile-extension:vscode-selfhost-import-aid || true
        env:
          NODE_OPTIONS: "--max-old-space-size=6144"
      
      - name: Build client (non-minified for faster builds)
        working-directory: ainative-studio
        run: |
          npm run gulp vscode-darwin-x64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: "--max-old-space-size=8192"
          UV_THREADPOOL_SIZE: 64
      
      - name: Package
        working-directory: ainative-studio
        run: npm run gulp vscode-darwin-x64-ci
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Verify build output
        run: |
          if [ ! -d "VSCode-darwin-x64" ] && [ ! -d "../VSCode-darwin-x64" ]; then
            echo "::error::Build output directory not found!"
            echo "Contents of ainative-studio directory:"
            ls -la
            echo "Contents of parent directory:"
            ls -la ../
            exit 1
          fi
        working-directory: ainative-studio
      
      - name: Create archive
        run: |
          if [ -d "VSCode-darwin-x64" ]; then
            cd VSCode-darwin-x64
            tar -czf ../ainative-studio-darwin-x64.tar.gz .
          elif [ -d "../VSCode-darwin-x64" ]; then
            cd ../VSCode-darwin-x64
            tar -czf ../ainative-studio/ainative-studio-darwin-x64.tar.gz .
          fi
        working-directory: ainative-studio
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ainative-studio-darwin-x64
          path: ainative-studio/ainative-studio-darwin-x64.tar.gz
          retention-days: 7

  package:
    needs: build-macos-x64
    runs-on: macos-13
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ainative-studio-darwin-x64
          path: ainative-studio/
      
      - name: Extract build
        working-directory: ainative-studio
        run: |
          echo "Extracting build artifact..."
          tar -xzf ainative-studio-darwin-x64.tar.gz -C ../
          mv ../Void.app ../AINativeStudio.app 2>/dev/null || true
          echo "Build extracted successfully"
          ls -la ../
      
      - name: Create ZIP archive
        run: |
          echo "Creating ZIP archive..."
          if [ -d "../AINativeStudio.app" ]; then
            cd ..
            zip -r -y ainative-studio/AINativeStudio-darwin-x64.zip AINativeStudio.app
          elif [ -d "../Void.app" ]; then
            cd ..
            # Rename app bundle
            mv Void.app AINativeStudio.app
            zip -r -y ainative-studio/AINativeStudio-darwin-x64.zip AINativeStudio.app
          fi
          echo "ZIP archive created"
      
      - name: Install Python dependencies for DMG creation
        run: |
          pip3 install Pillow
      
      - name: Create DMG with custom background
        run: |
          echo "Creating DMG with custom background..."
          
          # Create a temporary directory for DMG contents
          mkdir -p dmg-temp
          
          # Copy the app bundle
          if [ -d "../AINativeStudio.app" ]; then
            cp -R ../AINativeStudio.app dmg-temp/
          fi
          
          # Create Applications symlink
          ln -s /Applications dmg-temp/Applications
          
          # Create DMG background using your branding
          python3 -c "
from PIL import Image, ImageDraw, ImageFont
import os
width, height = 540, 380
bg_color = (240, 240, 245)
dmg_bg = Image.new('RGB', (width, height), bg_color)
draw = ImageDraw.Draw(dmg_bg)
logo = Image.open('ai_native_studio_icons/ai_native_studio_256x256.png')
logo_size = 120
logo_resized = logo.resize((logo_size, logo_size), Image.Resampling.LANCZOS)
logo_x, logo_y = 80, (height - logo_size) // 2
dmg_bg.paste(logo_resized, (logo_x, logo_y), logo_resized if logo_resized.mode == 'RGBA' else None)
try:
    font_large = ImageFont.truetype('/System/Library/Fonts/Helvetica.ttc', 24)
    font_small = ImageFont.truetype('/System/Library/Fonts/Helvetica.ttc', 16)
except:
    font_large = ImageFont.load_default()
    font_small = ImageFont.load_default()
text_x, title_y, subtitle_y, instruction_y = 250, 120, 150, 200
draw.text((text_x, title_y), 'AINative Studio', fill=(50, 50, 50), font=font_large)
draw.text((text_x, subtitle_y), 'AI-powered code editor', fill=(100, 100, 100), font=font_small)
draw.text((text_x, instruction_y), 'Drag to Applications to install', fill=(120, 120, 120), font=font_small)
arrow_start_x, arrow_start_y = 350, 280
arrow_end_x, arrow_end_y = 450, 280
draw.line([(arrow_start_x, arrow_start_y), (arrow_end_x, arrow_end_y)], fill=(100, 100, 100), width=3)
draw.polygon([(arrow_end_x, arrow_end_y), (arrow_end_x-10, arrow_end_y-5), (arrow_end_x-10, arrow_end_y+5)], fill=(100, 100, 100))
dmg_bg.save('dmg-background.png', 'PNG')
"
          
          # Create DMG with custom background
          hdiutil create -volname "AINative Studio" \
                        -srcfolder dmg-temp \
                        -ov -format UDRW \
                        temp.dmg
          
          # Mount the DMG to customize it
          hdiutil attach temp.dmg -readwrite -noverify -noautoopen
          
          # Set background image and layout using AppleScript
          osascript << 'EOF'
          tell application "Finder"
            tell disk "AINative Studio"
              open
              set current view of container window to icon view
              set toolbar visible of container window to false
              set statusbar visible of container window to false
              set the bounds of container window to {400, 100, 940, 480}
              set viewOptions to the icon view options of container window
              set arrangement of viewOptions to not arranged
              set icon size of viewOptions to 100
              set position of item "AINativeStudio.app" to {150, 200}
              set position of item "Applications" to {390, 200}
              close
            end tell
          end tell
          EOF
          
          # Unmount and convert to compressed DMG
          hdiutil detach "/Volumes/AINative Studio"
          hdiutil convert temp.dmg -format UDZO -o AINativeStudio-darwin-x64.dmg
          rm temp.dmg
          
          # Clean up
          rm -rf dmg-temp
          
          echo "DMG with custom background created successfully"
        working-directory: ainative-studio
      
      - name: Upload ZIP artifact
        uses: actions/upload-artifact@v4
        with:
          name: ainative-studio-darwin-x64-zip
          path: ainative-studio/AINativeStudio-darwin-x64.zip
          retention-days: 30
      
      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: ainative-studio-darwin-x64-dmg
          path: ainative-studio/AINativeStudio-darwin-x64.dmg
          retention-days: 30
      
